-- To seed data in any new table, go to data context and add the dummy data using HasData method of 
modelBuilder.
After that add the migration, by running the command- dotnet ef migrations add <Mig name (any)> in
PM console
Then add the changes (adding seed data) by running dotnet ef database update

--Making a new api for a model
-ADD a <EntityName>Service folder in Services folder, and add interface I<EntityName>Service
and its implementation class <EntityName>Service files in it
-add the method signatures (eg getAllProducts, getProductById,etc) to interface
-implement the interface in implementation file. Inject data context here to get access to db
-Register this service in Program.cs using AddScoped
-Create a controller <EntityName>Controller, and inject the interface in it, to get access to its methods
-call the methods in the endpt wrapper functions. (forwarding client request to service)


--fetching products by category on lcient side and displaying them
- we change the method signature of GetProducts in which we now pass an arg categoryUrl,
which is set to null by default. We also add an event ProductsChanged in the IProductService
and invoke it whenever a api request is made (GetProducts call)
-In ProductService, in GetProducts, if categoryUrl is null we fetch all products else we fetch
products according to categoryUrl

flow-												ProductsChanged invoked and products fetched
Index page (GetProducts called from ProductService) -------------------------------------------->
													Whenever homepage(/) or category page(/{categoryUrl})

ProductsChanged event invokation is notified to all the subscribers (ProductList) of the events's 
service (ProductService). 
State.Onchange += HandleChange is how the subscribers call the appropriate method (HandleChange) when
the event (OnChange) is invoked
Here, ProductService.ProductsChanged += StateHasChanged. StateHasChanged is an inbuilt function which
notifies the base component (ProductList) that state has changed (products) and causes it o re-render it
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events

--Go from Home to books
-products set to (all) in Home
-We go to /books so categoryUrl set to books and products which are books are fetched using ProductService 
-products set to (books) but page still displays all products, since productList doesn't know yet
-The event ProductsChanged is invoked and ProductList is notified
-ProductList calls StateHasChanged on being notified and hence is re-rendered displaying new list
of products (which are books)

--Search
-Server : 
-Add the SearchProducts method signature to IProductSevice, implement it in ProductService
-Add a Get route search/{searchText} to ProductController 

--SearchRecommendation
-Server : 
-Add the GetProductSearchSuggestions method signature to IProductSevice, implement it in ProductService
which returns a serviceresponse of a list of strings (instead of products) to autocomplete
									 ---------------
-Add a Get route seacrhSuggestions/{searchText} to ProductController 

-in frontend add methods for both of these in IProductService
-Implement both in ProductService
-SearchProducts will make an api call to $"api/product/search/{searchText}" and update 
Products, and invoke products changed
-GetProductSearchSuggestions will simply make an api call to $"api/product/searchSuggestions/{searchText}"
and return the data from result

-make a route for search page in index page "/search/{searchText}", if searchText is not
null call SearchProducts method to update the displayed products
-so that users can search products from url

--creating a search component
-inject ProductService and NavigationManager (to redirect to some other page)
-bind listens to OnChange event only
-with bind-value we can assign a custon event to listen to
-in input field the list name should match with the id of datalist component
-add the search component to layout

--creating a new layout
-create shared layout component and change the DefaultLayout and Layout in App.razor

--featured products
-add a new boolean column featured to products table, set default to false
-seed data again by updating some products in hasData with featured set as true
-backend
-add method signature to get featured products in IProductService and implement it in 
ProductService
-make a route "/featured" in ProductController
-frontend
-add method signature to get featured products in IProductService and implement it in 
ProductService (where you get it from api and return the products)
-display the featured products in its own shared component
-render the shared component in index page

--DTO (Data transfer objects)
-To return selected fields of a model, instead of all the fields
-We can also add other information with the selected fields

--Pagination in search results
-backend
-We make a new DTO class, ProductSearchResultDTO with a list of products, total pages, 
current page
-In IProductService we change the return type of SearchProducts to ProductSearchResultDTO 
instead of just a list of products, and add page as an argument
-Update its implementation in ProductService
-Update route in product controller to search/{searchText}/{page} where default value of page = 1

-frontend
-in IProductService add the fields currentPage, pageCount, lastSearchText, add arg
page to SearchProducts
-in productService initialize currentPage to 1, pageCount to 0, lastSearchText to empty string
-Update SearchProducts implementation and set currentPage, pageCount, lastSearchText based
on response, so that we can display pages in ProductList
-In index.razor update searchText route with page as parameter
-In search component set the request url to $"search/{searchText}/1" (default search result page)
-pass search = true as param to ProductList if it is a search page in index
-In productList, if it is a searchList then render buttons for total pages (pageCount 
set in productService on SearchProducts call) which point to /search/@ProductService.LastSearchText/@i
where i is the button / page number
-Outline the button if its number is same as currentPage

--cart using local storage 
-add Blazored.LocalStorage nuget package in client project
-add the BlazoredLocalStorage service to app in program.cs 
-also add the using Blazored.LocalStorage directive in _imports to use it in client globally
-add CartCounter component, and display it next to Search
-Make a CartItem model in backend with properties ProductId and ProductTypeId (All other
info regarding the item can be gathered in server with these 2 props)

-client
-add CartService which will add items to local storage and read items from local storage
-contains an event OnChange so that whenever cart updated, we can invoke it; method
to add item to cart, get all items from cart (localstorage)
-In implementation class we inject local storage in ctor, and implement the methods

-Make an add to cart button in ProductDetails page which takes the selected productVariant 
(GetSelectedVariant()), converts it into a cartItem and stores it in localStorage using
CartService

-Now when we add product to cart we want to update productCount in topbar cart
So CartCounter needs to subscribe to CartService, listen to the event OnChange starting when
CartCounter is initialized -> rerender component when OnChange is invoked
-Add method to get cart items count to display in CartCounter

--Turn cartitems into products (with selected fields using CartProductResponeDTO)
though api endpt
-create a CartProductResponeDTO and add all the properties to show
-create a cartservice in backend
-add method signature of the method to convert cartitems to CartProductDTOs in ICartService
which accepts list of cartitems as input
-create a CartController to make a POST api endpoint for this service method
-make a method GetCartProducts in the client ICartService, no need to add arg
List<CartItem> in the signature, as we can access them from localstorage
-implement the post api call to /api/cart/product in the method implementation

-adding a method in client CartService to remove item from cart (local storage)
-since we store item in localStorage by productId and productTypeId of item, it only makes
sense to pass those as arguments to Remove method
-add delete button in CartPage, add onclick method which calls removeProductFromCart with the
parameters

-add quantity field to CartItem model and Cart
-in server CartService add the quantity field wherever CartProductResponseDTO is created
-make changes in client CartService addToCart method 

-Update item quantity in cart
-add method UpdateQuantity in client ICartService which accepts CartProductResponseDTO
as input (since it is displayed in cart page) and sets the quantity of product ans input's quantity

-add input field for quantity in cart for each product
-onchange i input field, parse the ChangeEventArgs and get its integer value, and update 
product quantity, update the quantity in localstorage using cartService

---user authentication

-add user registration model
-create a user registration form (EditForm in Register razor component)
-add a new shared component UserMenuButton, which will give the user option to login / 
register (using dropdown)

-for using validations in EditForm we need to add anotations to the fields in our model
(here userRegister), eg [Required] with namespace using System.ComponentModel.DataAnnotations;
-to activate validations in our editForm we need to add the DataAnnotationsValidator component
inside the form
-we can display validation message in 2 ways
1. Using <ValidationSummary /> component we can show all error messages together
2. Using <ValidationMessage For = "@(() => Model.Field)" /> we can show error message for 
that field

--creating a user model to store user in database
-We need a byte array to store password since we're going to hash it and a byte array for
salt, since the hash for 2 same passwords will be same and a salt is a value generated 
by a cryptographically secure function that is added to the input of hash functions to
create unique hashes for every input, regardless of the input not being unique
-we need another table for users in db, so add DbSet in Datacontext
-add migration and update db

--creating an Authentication service in server
-register in program.cs
-A method to register user which requires email and password, and returns the userId
-The design decision taken for uniqueness of user is : Unique emails for  users, usernames
can be same
-A method to check if user exists which accepts Email

--Add AuthController to access the service from client which accepts the userRegister input

--Add AuthService to Client which conatins all the methods to query the AuthService in 
server
-register in program.cs and add to imports


--Using the AuthService in Register page
-inject AuthService
-call Register method in HandleRegistration()
 
 ---Login user (using email and password)

 -Create a UserLogin model (Email & password)
 -Create a Login page similar to Register page using EditForm

--Handling login in backend
 -In backend, when we get a POST request with email and password we need to verify
 the user email and password and also create a JSON web token that the user can use for 
 every other request, meaning that not with every request the user has to enter email &
 password. We'd just put that JSON web token to the request header and then the service 
 knows who the user is.

 -To do that we need to add a secret key to our app,
 we add  "AppSettings": {
    "Token": "HExv9Cfpj6BrxR6"
  }, to appsettings.json

  -Add a Login method to server auth service which checks if user exists, verifies password
  and on success returns a JWT
  -To generate a JWT, we need the secret key in our appsettins.json, to do so we inject 
  configuration to the AuthService class
  -With the help of JWT, we can store some claims to the token. For eg the claim 
  could be - username, email, user id, anything
  -we'll add the claims - user id, username, email

  --implement login on client
  -add and implement the login function in AuthService which makes the api call and returns
  jwt string
  -we need to inject authservice, local storage (to store the token in local storage),
  navigation manager (to redirect to home) in login page

  --implement custom AuthStateProvider
  -we'll not ask this service directly if a user is authenticated or not, we will use
  components that react to the current state and ask the authentication provider to
  notify these components of the new state
  install new nuGet package microsoft.aspnetcore.components.authorization in client
  -create a new class CustomAuthStateProvider in client
 -ParseClaimsFromJwt taken from
https://github.com/SteveSandersonMS/presentation-2019-06-NDCOslo/blob/master/demos/MissionControl/MissionControl.Client/Util/ServiceExtensions.cs

--expose the authentication state
-add the global using directive for Microsoft.AspNetCore.Components.Authorization in 
client/program.cs
-Add 'AddOptions', 'AddAuthorizationCore' to services in program.cs, register the 
CustomAuthStateProvider as AuthenticationStateProvider for client
-wrap the whole App.razor in <CascadingAuthenticationState> so that the whole app can 
check the authentication state of user
-Also replace RouteView component with AuthorizeRouteView so that only authenticated users
are authorized to view content

--building logout button using AuthorizeView
-after setting authToken in local storage in login we get the new authentication state of
user by using the AuthenticationStateProvider (CustomAuthStateProvider)
-Now with the new authentication state being set, we can go to our user button and display 
login / logout button  based on user auth state
-Using authorizeView show logout / login & register accoring to authorized or notAuthoried
-on clicking logout remove authToken from local storage and get the authentication state
navigate to home page after logging out

--sending user back to the previous page, after logging in
-for this we need a return url and for it to work we need to add the nuget package
microsoft.aspnetcore.webutilities (to usee query strings)
-now in user button, the href for login needs to be updated so it has a returnUrl query
parameter for the user to return to this page
href = 'login/returnUrl=@NavigationManager.Uri'
-Now in login page we need to accept this query parameter and redirect user to it after login
-get the returnUrl query parameter in login page when the component is intialized 
using QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var param)


sample login route https://localhost:7030/login?returnUrl=movies
