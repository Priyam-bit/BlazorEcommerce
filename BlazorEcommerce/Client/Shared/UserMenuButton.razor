@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class = "dropdown">
    <button @onclick = "ToggleUserMenu"
            @onfocusout = "HideUserMenu"
            class = "btn btn-secondary dropdown-toggle user-menu-button">
            <span class = "oi oi-person person-icon"></span>
    </button>
    <div class = "dropdown-menu dropown-menu-right @UserMenuCssClass">
        <AuthorizeView>
            <Authorized>
                <button class = "dropdown-item" @onclick = "HandleLogout">Logout</button>
            </Authorized>
            <NotAuthorized>
                <a href = "login" class = "dropdown-item">Login</a>
                <a href = "register" class = "dropdown-item">Register</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    private bool showUserMenu = false;

    private string? UserMenuCssClass => showUserMenu ? "show-menu" : null;

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        showUserMenu = false;
    }

    private async Task HandleLogout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("");
    }
}
