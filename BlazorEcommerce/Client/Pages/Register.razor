@page "/register"
@inject IAuthService AuthService

<PageTitle>Register</PageTitle>

<h3>Register</h3>

<EditForm Model = "user" OnValidSubmit = "HandleRegistration">
    <DataAnnotationsValidator />
    <div class = "username mb-3">
        <label for = "username">Username</label>
        <InputText id = "username" @bind-Value = "user.Username" class = "form-control"
        autocomplete = "username"/>
        <ValidationMessage For = "@(() => user.Username)" />
    </div>
    <div class = "email mb-3">
        <label for = "email">Email</label>
        <InputText id = "email" @bind-Value = "user.Email" class = "form-control"
        autocomplete="username"/>
        <ValidationMessage For = "@(() => user.Email)" />
    </div>
    <div class = "password mb-3">
        <label for = "password">Password</label>
        <InputText id = "password" @bind-Value = "user.Password" class = "form-control" 
        type = "password" autocomplete = "new-password"/>
        <ValidationMessage For = "@(() => user.Password)" />
    </div>
    <div class = "confirmPassword mb-3">
        <label for = "confirmPassword">Confirm Password</label>
        <InputText id = "confirmPassword" 
            @bind-Value = "user.ConfirmPassword"
            class = "form-control"
            type = "password"
            autocomplete = "new-password"/>
            <ValidationMessage For = "@(() => user.ConfirmPassword)" />
    </div>
    <button type = "submit" class = "btn btn-primary">Register</button>
    <div class = "@messageCssClass">
        <span>@message</span>
    </div>
</EditForm>

@code {
    //EditForm needs a model and a function to call on submit events
    //populates all its fields, since we bind them to the inputTexts
    UserRegister user = new UserRegister();

    string message = string.Empty;
    string messageCssClass = string.Empty;

    async Task HandleRegistration()
    {
        var result = await AuthService.Register(user);
        message = result.Message;
        if(result.Success)
        {
            messageCssClass = "text-success";
        }
        else
        {
            messageCssClass = "text-danger";
        }
    }
}
