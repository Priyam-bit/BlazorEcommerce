@page "/cart"
@inject ICartService CartService

<PageTitle>Cart</PageTitle>
<div class = "container">
    <div class = "cart-title">
        <h3>Shopping Cart</h3>
    </div>

    @if (cartProducts == null || cartProducts.Count == 0)
    {
        <span>@message</span>
    }
    else
    {
        <div>
            @foreach (var product in cartProducts)
           {
               <div class = "cart-product-container">
                   <div class = "image-wrapper">
                       <img src = "@product.ImageUrl" />
                   </div>
                   <div class = "item-details">
                       <div class = "name">
                           <h5><a href = "/product/@product.ProductId">@product.Title</a></h5>
                           <span>@product.ProductType</span>
                            <input type = "number" value = "@product.Quantity"
                            @onchange = "@((ChangeEventArgs e) => UpdateQuantity(e,product))"
                            class = "form-control input-quantity"
                            min = "1"/>
                            <div class = "cart-product-price">
                                $@(product.Price * product.Quantity)
                            </div>
                       </div>
                   </div> 
                    <button class = "btn delete" @onclick = "@(() => 
                        RemoveProductFromCart(product.ProductId, product.ProductTypeId))">
                        <span class = "oi oi-trash"></span>
                    </button>
               </div>
           }
            <div class = "cart-total-wrapper">
                <div class = "cart-total">
                    Total (@cartProducts.Count) : $@cartProducts.Sum(product => @product.Price * product.Quantity)
                </div>
            </div>
        </div>
    }
</div>

@code {
    List<CartProductResponeDTO> cartProducts = null;
    string message = "Loading cart...";

    //util function to avoid repition
    private async Task LoadCart()
    {
        //check if localstorage contains cart items 
        if((await CartService.GetCartItems()).Count == 0)
        {
            message = "Your cart is empty...";
            cartProducts = new List<CartProductResponeDTO>();
        }
        else
        {
            //if cartItems are present, get corresponding cartProducts from server
            cartProducts = await CartService.GetCartProducts();
        }
    } 

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        //remove product from cart
        await CartService.RemoveProductFromCart(productId, productTypeId);
        //load cart again
        await LoadCart();
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponeDTO product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        await CartService.UpdateQuantiy(product);
    }
}
